<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="pos" type="vec3" state="POSITION" />
	<param name="instancePos" type="vec3" state="VERTEX_ATTR0" />
	<param name="instanceDir" type="vec3" state="VERTEX_ATTR1" />
	<param name="nor" type="vec3" state="NORMAL" />
	<param name="VP" type="mat4" state="VIEW_PROJECTION_MATRIX" />
	<param name="color" type="vec4" state="COLOR" />
	<param name="densityMap" type="int" default="0" />
	<language name="glsl" version="1.5">
		<bind param="pos" program="vp" />
		<bind param="instancePos" program="vp" />
		<bind param="instanceDir" program="vp" />
		<bind param="nor" program="vp" />
		<bind param="VP" program="vp" />
		<bind param="color" program="vp" />
		<bind param="densityMap" program="fp" />

		<include source="noise_functions.glsl" program="fp" />

		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
uniform mat4 VP;
in vec3 pos;
in vec3 instancePos;
in vec3 instanceDir;
in vec3 nor;
in vec4 color;

out jit_PerVertex {
	flat vec4 color;	
	smooth vec3 nor;
	smooth vec3 wPos;
	flat int id;
} jit_out;

void apply_rotation(inout vec3 p, inout vec3 n, vec3 front){

	//front *= dot(front, n) > 0 ? 1 : -1;
	p += front*0.5;
	float len = length(front);
	front /= len;
	p *= vec3(0.1, 0.1, max(0.1, len*2));
	//p *= vec3(0.1, 0.1, 1);
	vec3 right = normalize(cross(front, vec3(0,1,0)));
	vec3 up = normalize(cross(front, right));
	p = p.x*right + p.y*up + p.z*front;
	n = n.x*right + n.y*up + n.z*front;
	jit_out.id = int(gl_InstanceID);
}

void main() {	

	vec3 p = pos;
	vec3 n = nor;
	apply_rotation(p, n, instanceDir);
	jit_out.wPos = p + instancePos;
	gl_Position = VP * vec4(jit_out.wPos, 1.);	
	jit_out.color = color;
	jit_out.nor = n;

}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

uniform sampler2DRect densityMap;

in jit_PerVertex {
	flat vec4 color;
	smooth vec3 nor;
	smooth vec3 wPos;
	flat int id;
} jit_in;

out vec4 color;

float readDensity(vec3 pos){

	if(	pos.x < 0 || pos.x >= 256 ||
		pos.y < 0 || pos.y >= 256 ||		
		pos.z < 0 || pos.z >= 256) return 0.;
	//pos.z = 256 - pos.z;
	float slice = pos.z;

	//tile z slices
	pos.z = mod(pos.z, 64);
	pos.x += 256 * mod(pos.z, 8);
	pos.y += 256 * floor(pos.z / 8);
	//pos.xy += texelFetch(foldBuff, int(pos.z)).xy;

	vec4 densities = texture(densityMap, vec2(pos.x,2048 - pos.y));
	if(slice < 64) return densities.r;
	if(slice >= 64 && slice < 128) return densities.g;
	if(slice >= 128 && slice < 192) return densities.b;
	return densities.a;
}
/*
float calcAO(vec3 s, vec3 V){

	uint seed = uint(s.x*3772*2000) + uint(s.y*78223*2000) + uint(26699);

	//s += 0.01*(vec3(RandomFloat01(seed), RandomFloat01(seed), RandomFloat01(seed))-0.5);

	if(	s.x <= -1 || s.x >= 1 ||
		s.y <= -1 || s.y >= 1 ||
		s.z <= -1 || s.z >= 1){
		return 1;
	} 
	s = 128*(s + 1);

	float numDir = 30;
	float occ = numDir;
	float numSamps = 3;
	//float divisor = 8 / (numSamps*numDir);
	vec3 p;

	for(float f = 0; f < numDir; f+=1){
		vec3 rd = randomUnitVector3(seed);
		rd *= dot(rd, -V) > 0 ? 1 : -1;
		float ra = RandomFloat01(seed)*5 + 0.3;

		for(float k = 0; k < numSamps; k+=1){

			p = floor(s + rd*ra);

			if(	p.x <= 0 || p.x >= 255 ||
				p.y <= 0 || p.y >= 255 ||
				p.z <= 0 || p.z >= 255){
				break;
			}

			if(readDensity(p) > 0){
				occ -= 1; 
				break;
			}

			if(occ <= 0){ return 0; }
			ra += 5;
		} 
	}
	return occ/numDir;
}
*/

float calcShadow(vec3 s, vec3 rd){

	if(	s.x <= -1 || s.x >= 1 ||
		s.y <= -1 || s.y >= 1 ||
		s.z <= -1 || s.z >= 1){
		return 1;
	} 
	s = 128*(s + 1);
	vec3 v = floor(s);
	vec3 step, invDir, T;

	if(rd.x != 0){
		step.x = (rd.x < 0) ? -1 : 1;
		invDir.x = 1 / rd.x;
		T.x = fract(s.x);
	} else {
		invDir.x = 999999;
		T.x = 999999;
	}

	if(rd.y != 0){
		step.y = (rd.y < 0) ? -1 : 1;
		invDir.y = 1 / rd.y;
		T.y = fract(s.y);
	} else {
		invDir.y = 999999;
		T.y = 999999;
	}

	if(rd.z != 0){
		step.z = (rd.z < 0) ? -1 : 1;
		invDir.z = 1 / rd.z;
		T.z = fract(s.z);
	} else {
		invDir.z = 999999;
		T.z = 999999;
	}

	vec3 voxSize = vec3(1);
	vec3 deltaT = voxSize * invDir;
	vec3 voxIncr;
	float density = 1;

	for(int i = 0; i < 5; i++){
		voxIncr = vec3(	(T.x <= T.y) && (T.x <= T.z) ? 1 : 0,
						(T.y <= T.x) && (T.y <= T.z) ? 1 : 0,
						(T.z <= T.x) && (T.z <= T.y) ? 1 : 0);

		T += voxIncr*deltaT;
		v += voxIncr*step;		
	}

	while(	v.x >= 0 && v.x < 256 &&
			v.y >= 0 && v.y < 256 &&
			v.z >= 0 && v.z < 256){

		voxIncr = vec3(	(T.x <= T.y) && (T.x <= T.z) ? 1 : 0,
						(T.y <= T.x) && (T.y <= T.z) ? 1 : 0,
						(T.z <= T.x) && (T.z <= T.y) ? 1 : 0);

		vec3 dist = voxIncr*deltaT;
		T += dist;
		v += voxIncr*step;
		density -= readDensity(v)*0.1;//*(dist.x + dist.y + dist.z)*1;
		if(density <= 0) return 0.;
	}
	return density;

}

void main() {

	vec3 n = normalize(jit_in.nor);
	vec3 l = normalize(vec3(1,1,1));
	uint seed = uint((200+jit_in.wPos.x*3772)) + uint((200+jit_in.wPos.y)*78223) + uint((200+jit_in.wPos.z)*18927) + uint(26699*jit_in.id);

	vec3 rand = randomUnitVector3(seed);
	//l = normalize(l + rand*0.2);

	float diff = dot(l,n);
	//diff *= calcShadow(jit_in.wPos, l);
	diff *= diff > 0. ? calcShadow(jit_in.wPos, l) : 1;
	diff = max(0, diff);
	color = vec4(diff, diff, diff, 1);
	color = vec4(jit_in.wPos, 1);
}	
]]>
		</program>
	</language>
</jittershader>
