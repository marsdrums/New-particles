<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="pos" type="vec3" state="POSITION" />
	<param name="instancePos" type="vec3" state="VERTEX_ATTR0" />
	<param name="MV" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="invV" type="mat4" state="VIEW_MATRIX" transform="INVERSE" />
	<param name="P" type="mat4" state="PROJECTION_MATRIX" />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />
	<param name="nearClip" type="float" state="NEAR_CLIP" />
	<param name="farClip" type="float" state="FAR_CLIP" />
	<param name="radius" type="float" default="0.04" />
	<param name="randTex" type="int" default="0" />
	<param name="aperture" type="float" default="0.01" />
	<param name="focalDist" type="float" default="1" />
	<language name="glsl" version="1.5">
		<bind param="pos" program="vp" />
		<bind param="instancePos" program="vp" />
		<bind param="MV" program="vp" />
		<bind param="invV" program="vp" />
		<bind param="invV" program="fp" />
		<bind param="P" program="vp" />
		<bind param="eye" program="vp" />
		<bind param="eye" program="fp" />
		<bind param="nearClip" program="fp" />
		<bind param="farClip" program="fp" />
		<bind param="radius" program="vp" />
		<bind param="radius" program="fp" />
		<bind param="randTex" program="fp" />
		<bind param="aperture" program="fp" />
		<bind param="aperture" program="vp" />
		<bind param="focalDist" program="vp" />
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
uniform mat4 MV, invV, P;
in vec3 pos, instancePos;
uniform vec3 eye;
uniform float radius, aperture, focalDist;

out jit_PerVertex {
	smooth vec3 wPos;
	smooth vec3 targetPos;
	smooth vec3 rd;
	flat vec3 ce;
} jit_out;

void main() {	

	jit_out.ce = instancePos;
	float dist = length(instancePos - eye);
	float radiusIncrease = abs(dist - focalDist)*aperture;
	vec4 vPos = MV*vec4(instancePos,1) + vec4(pos*(radius*1.1 + radiusIncrease),0);
	jit_out.wPos = (invV * vPos).xyz;
	jit_out.rd = jit_out.wPos - eye;
	jit_out.targetPos = eye + normalize(jit_out.rd)*focalDist;
	gl_Position = P * vPos;
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

uniform vec3 eye;
uniform float nearClip, farClip, radius, aperture;
uniform sampler2DRect randTex;
uniform mat4 invV;

in jit_PerVertex {
	smooth vec3 wPos;
	smooth vec3 targetPos;
	smooth vec3 rd;
	flat vec3 ce;
} jit_in;

struct ray{
	vec3 o;
	vec3 d;
};

struct obj{
	vec3 ce;
	float ra;
	float dist;
	vec3 nor;
	vec3 pos;
};

out vec4 color;

#define OCTAVES 6.
#define PI 3.14159265359
#define TWOPI 6.28318530718 

uint wang_hash(inout uint seed){

    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}
 
float RandomFloat01(inout uint seed) { 
	return float(wang_hash(seed)) / 4294967296.0; 
}

vec2 RandomVec201(inout uint seed) { 
	return vec2( 	RandomFloat01(seed),
					RandomFloat01(seed)); 
}

vec3 RandomVec301(inout uint seed) { 
	return vec3( 	RandomFloat01(seed),
					RandomFloat01(seed),
					RandomFloat01(seed)); 
}

vec4 RandomVec401(inout uint seed) { 
	return vec4( 	RandomFloat01(seed),
					RandomFloat01(seed),
					RandomFloat01(seed),
					RandomFloat01(seed)); 
}

vec2 randomUnitVector2(inout uint seed){

    float a = RandomFloat01(seed) * TWOPI;
    return vec2( cos(a), sin(a) );
}

vec3 randomUnitVector3(inout uint seed){

    float z = RandomFloat01(seed) * 2.0f - 1.0f;
    float a = RandomFloat01(seed) * TWOPI;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}

void get_ray_info(out ray r){
	r.o = eye;
	r.o += texture(randTex, mod(gl_FragCoord.xy, vec2(128))).xyz ;
	r.d = normalize(jit_in.targetPos - r.o);
	//r.d /= focalDist;
}

void get_obj_info(out obj o){
	o.ce = jit_in.ce;
	o.ra = radius;
}

float fast_sqrt(float x_in)
{
	int x = floatBitsToInt(x_in);
	x = 0x1FBD1DF5 + (x >> 1);
	return intBitsToFloat (x);
}

void ray_sphere_intersect(in ray r, inout obj o){

	vec3 oc = r.o - o.ce;
    float b = dot( oc, r.d );
    vec3 qc = oc - b*r.d;
    float h = o.ra*o.ra - dot( qc, qc );

    if( h<0.0 ) discard; // no intersection

    o.dist = -b - sqrt(h);//, -b+h );
    o.pos = r.o + r.d*o.dist;
    o.nor = (o.pos - o.ce) / o.ra;
}

void set_FragDepth(in obj o){
	gl_FragDepth = o.dist / farClip;
}

void main() {

	ray r;	
	obj o;

	get_ray_info(r);
	get_obj_info(o);
	ray_sphere_intersect(r, o);
	set_FragDepth(o);

	color.rgb = o.nor;
	color.a = 1;
}	
]]>
		</program>
	</language>
</jittershader>
