<jittershader name="default">
	<description>Default Slab </description>
	//params
	<param name="numEmitters" type="float" default="0." />
	<param name="numForces" type="float" default="0." />
	<param name="numObstacles" type="float" default="0." />

	//textures
	<param name="posAgeTex" type="int" default="0" />
	<param name="velMassTex" type="int" default="1" />
	<param name="aliveMatTex" type="int" default="2" />
	<param name="emiTex" type="int" default="3" />
	<param name="forTex" type="int" default="4" />
	<param name="obsTex" type="int" default="5" />
	<param name="bounceTex" type="int" default="6" />

	//states
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />
	<param name="texDim0" type="vec2" state="TEXDIM0" />

	//time
	<param name="time" type="float" state="TIME" />
	<param name="frame" type="int" state="FRAME" />
	<param name="deltaTime" type="float" state="DELTA_TIME" />

	<language name="glsl" version="1.5">

		<bind param="numEmitters" program="fp" />
		<bind param="numForces" program="fp" />
		<bind param="numObstacles" program="fp" />

		<bind param="posAgeTex" program="fp" />
		<bind param="velMassTex" program="fp" />
		<bind param="aliveMatTex" program="fp" />
		<bind param="emiTex" program="fp" />
		<bind param="forTex" program="fp" />
		<bind param="obsTex" program="fp" />
		<bind param="bounceTex" program="fp" />
		<bind param="texDim0" program="fp" />

		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />

		<bind param="time" program="fp" />
		<bind param="frame" program="fp" />
		<bind param="deltaTime" program="fp" />

		<include source="noise_functions.glsl" program="fp" />

		<program name="vp" type="vertex"  >
<![CDATA[
	#version 330 core
	
	in vec3 position;
	in vec2 texcoord;
	out jit_PerVertex {
		vec2 texcoord;
	} jit_out;
	uniform mat4 modelViewProjectionMatrix;
	uniform mat4 textureMatrix0;
	
	void main(void) {
		gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
		jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
	}
]]>
</program>
		
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core
#define TWOPI 6.28318530718

in jit_PerVertex {
	vec2 texcoord;

} jit_in;

layout (location = 0) out vec4 outPosAge;
layout (location = 1) out vec4 outVelMass;
layout (location = 2) out vec4 outAliveMat;
layout (location = 3) out vec4 outBounce;

uniform sampler2DRect posAgeTex, velMassTex, aliveMatTex, emiTex, forTex, obsTex, bounceTex;
uniform vec2 texDim0;
uniform float numEmitters, numForces, numObstacles;
uniform float time, frame, deltaTime;

struct particle{
	vec3 pos;
	vec3 dir;
	vec3 vel;
	float size;
	float age;
	float alive;
	float mass;
	float mat; 
	float id;
	uint rng;
	float life_step;
	float bounced;
	vec3 bounced_pos;
};

struct new_particle{
	vec3 pos;
	vec3 prevpos;
	vec3 vel;
	vec3 emivel;
	float size;
	float type;
	float speed;
	float mass;
	float mat;
	float life_step;
};

struct force{
	int type;
	float amt;
	float rad;
	float soft;
	vec3 pos;
	vec3 dir;
	int field_type;
	int noise_func;
	vec3 field_offset;
	vec3 field_scale;
	float field_octaves;
	vec3 diff;
	float dist;
};

struct obstacle{
	int shape;
	vec3 position;
	vec3 direction;
	vec3 scale;
	float action;
	float roughness;
	float softness;
	float radius;
};

/*
//Random functions
uint wang_hash(inout uint seed){

    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}
 
float RandomFloat01(inout uint seed) { return float(wang_hash(seed)) / 4294967296.0; }
*/
vec3 randomUnitVector(inout uint seed){

    float z = RandomFloat01(seed) * 2.0f - 1.0f;
    float a = RandomFloat01(seed) * TWOPI;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}

void get_particle_current_state(inout particle p){ 
	//return  uint(uv.x*3772) + uint(uv.y*78223) + uint(frame)*uint(26699);
	p.id = floor(jit_in.texcoord.x) + floor(jit_in.texcoord.y)*2000;//texDim0.x; 
	p.rng = uint(gl_FragCoord.x*3772) + uint(gl_FragCoord.y*78223) + uint(frame)*uint(26699);
	vec4 lookup0 = texture(posAgeTex, jit_in.texcoord);
	vec4 lookup1 = texture(velMassTex, jit_in.texcoord);
	vec4 lookup2 = texture(aliveMatTex, jit_in.texcoord);
	p.pos = lookup0.xyz;
	p.age = lookup0.w;
	p.vel = lookup1.xyz;
	p.mass = lookup1.w;
	p.alive = lookup2.x;
	p.mat = lookup2.y;
	p.life_step = lookup2.z;
	p.bounced = lookup2.w;
	if(p.bounced == 1) p.bounced_pos = texture(bounceTex, jit_in.texcoord).xyz;

	//*** p.dir is missing. Figure out where to compute it
}

void update_age(inout particle p){

	p.age -= p.life_step; //change with proper life expectancy

	if(p.age <= 0 || p.alive == 0){
		p.age = 0;
		p.alive = 0;
		return;
	} 
}

void update_particle_position(inout particle p){

	if(p.bounced == 1){
		p.bounced = 0;
		p.pos = p.bounced_pos;
		return;
	} else {

		if(p.alive < 1) return;
		else {
			p.pos += p.vel;
			return;
		}
	}
/*
	if(p.alive == 0){
		if(p.bounced == 1){
			p.bounced = 0;
			p.pos = p.bounced_pos;
			return;		
		} else {
			return;
		}
	}

	else if(p.alive == 0.5){
		if(p.bounced == 1){
			p.bounced = 0;
			p.pos = p.bounced_pos;
			return;		
		} else {
			return;
		}
	} 

	else {

		if(p.bounced == 1){
			p.bounced = 0;
			p.pos = p.bounced_pos;
			return;	
		} else {
			p.pos += p.vel;
			return;
		}
	}
*/
	//also, use DELTA to control aging in ms and indipendently of frame rate
}

//______ EMITTERS __________________________________________________________________________________________

void generate_particle(inout particle p, in new_particle newp){

	p.alive = 1;
	p.age = 1;
	p.dir = randomUnitVector(p.rng);
	p.vel = p.dir*newp.speed;//
	//p.vel -= newp.emivel*randomUnitVector(p.rng);
	p.pos = mix(newp.pos, newp.prevpos, RandomFloat01(p.rng));
	p.pos += p.vel * RandomFloat01(p.rng);
	//p.vel *= RandomFloat01(p.rng);
	p.mass = newp.mass;
	p.life_step = newp.life_step;
	p.mat = newp.mat;
	p.bounced = 0;
}

bool to_generate(float id, float emiFrom, float emiTo){

	if(emiFrom == emiTo) return false; //if rate is 0
	if(emiFrom < emiTo) { return id >= emiFrom && id < emiTo; }
	else { return id >= emiFrom || id < emiTo; }
}

void emit_particles(inout particle p){

	new_particle newp;

	for(float f = 0.5; f < numEmitters; f+=1.0){
		
		vec4 lookup2 = texture(emiTex, vec2(f, 2.5));

		if(lookup2.w == 0) continue; //enable

		vec4 lookup1 = texture(emiTex, vec2(f, 1.5));

		float emiFrom = lookup1.z;
		float emiTo = lookup1.w;

		if(!to_generate(p.id, emiFrom, emiTo)) continue;

		vec4 lookup3 = texture(emiTex, vec2(f, 3.5));
		vec4 lookup0 = texture(emiTex, vec2(f, 0.5));
		vec4 lookup4 = texture(emiTex, vec2(f, 4.5));
		newp.mass = mix(lookup0.w, lookup3.w, RandomFloat01(p.rng));
		newp.pos = lookup0.xyz;
		newp.prevpos = lookup2.xyz;
		newp.emivel = lookup3.xyz;
		newp.speed = mix(lookup1.y, lookup4.w, RandomFloat01(p.rng));
		newp.life_step = mix(lookup4.x, lookup4.y, RandomFloat01(p.rng));
		newp.mat = lookup4.z;
		generate_particle(p, newp);
		return;
	}
}

//______ FORCES __________________________________________________________________________________________


void point_attractor_force(inout particle p, in force f){

	f.diff *= f.amt / (f.dist*f.dist + 0.01);
	p.vel += f.diff / p.mass;
}
void directional_force(inout particle p, in force f){ 

	p.vel += f.dir * f.amt / p.mass; 
}
void drag_force(inout particle p, in force f){ 

	p.vel /= f.amt/p.mass + 1; 
}

float hashfloat(float h){
	return fract(sin(h) * 43758.5453123);
}

float noisefloat(vec3 x) {
	vec3 p = floor(x);
	vec3 f = fract(x);
	f = f * f * (3.0 - 2.0 * f);

	float n = p.x + p.y * 157.0 + 113.0 * p.z;
	return mix(
			mix(mix(hashfloat(n + 0.0), hashfloat(n + 1.0), f.x),
					mix(hashfloat(n + 157.0), hashfloat(n + 158.0), f.x), f.y),
			mix(mix(hashfloat(n + 113.0), hashfloat(n + 114.0), f.x),
					mix(hashfloat(n + 270.0), hashfloat(n + 271.0), f.x), f.y), f.z);
}

float fbmfloat(in particle p, in force f) {
	vec3 pos = p.pos * f.field_scale + f.field_offset;
	float s = 0.0;
	float q = 0.5;
	float g = 2.02;
	for(int i = 0; i < f.field_octaves; i++){
		s += q * (noisefloat(pos)*2 - 1);
		q *= 0.5;
		pos *= g;
	}
	return s;
}

vec3 fbm(in particle p, in force f) {

	vec3 pos = p.pos*f.field_scale + f.field_offset;
	float H = 0.6;
	float lacunarity = 1;
	float frequency = 3;
	float offset = 0;

	switch (f.noise_func) {
		case 0:	//simplex
			return snoise3(pos); 
		    //break;
		case 1: //perlin
			vec3 rep = vec3(1);
			return pnoise3(pos, rep); 
		    //break;
		case 2: //Ridged multifractal terrain
			float gain = 1;
			return ridgedMultiFractal3(pos, H, lacunarity, frequency, f.field_octaves, offset, gain);
			//break;
		case 3: //Hybrid additive/multiplicative multifractal
			return hybridMultiFractal3(pos, H, lacunarity, frequency, f.field_octaves, offset);
			//break;
		case 4: // Procedural multifractal 
			return multifractalA3(pos, H, lacunarity, frequency, f.field_octaves, offset);
			//break;
		case 5: // Heterogeneous procedural terrain
			return heteroTerrainA3(pos, H, lacunarity, frequency, f.field_octaves, offset);
			//break;
		case 6: // Procedural fBm 
			return fBmA3(pos, H, lacunarity, frequency, f.field_octaves);
			//break;
		case 7: //voronoi crackle
			float multiply = 1;
			float reduce = 1;
			float jitter = 0;
			return VoronoiCrackle3(pos, multiply, reduce, offset, jitter);
			//break;
	} 
}

void force_field(inout particle p, in force f){

	p.vel += f.amt*fbm(p, f) / p.mass;
}

void rotational_field(inout particle p, in force f){

	vec3 a = fbm(p, f);
	//a *= field_intensity;
	//return length(p.vel)*rotateVector(normalize(p.vel), a.x, a.y, a.z);

	a *= f.amt;
	a *= PI;
	vec3 cosa = cos(a);
	vec3 sina = sin(a);
	float vel_length = length(p.vel);
	p.dir = p.vel / vel_length;

	p.dir.x = p.dir.x*cosa.z - p.dir.y*sina.z;
	p.dir.y = p.dir.x*sina.z + p.dir.y*cosa.z;

	p.dir.x = p.dir.x*cosa.y - p.dir.z*sina.y;
	p.dir.z = -p.dir.x*sina.y + p.dir.z*cosa.y;

	p.dir.y = p.dir.y*cosa.x - p.dir.z*sina.x;
	p.dir.z = p.dir.y*sina.x + p.dir.z*cosa.x;

	p.vel = p.dir * vel_length;
}

void acceleration_field(inout particle p, in force f){
	p.vel += p.vel * fbmfloat(p, f)*f.amt / p.mass;
}
void drag_field(inout particle p, in force f){
	p.vel /= (abs(fbmfloat(p, f))*f.amt / p.mass + 1);
}

void field_force(inout particle p, in force f){

	switch (f.field_type) {
		case 0:	
			force_field(p, f);
		    return;
		case 1:
			rotational_field(p, f);
		    return;
		case 2:
			acceleration_field(p, f);
			return;
		case 3:
			drag_field(p, f);
			return;
	} 
}

void apply_forces(inout particle p){

	if(p.alive < 1) return;

	force f;

	for(float i = 0.5; i < numForces; i+=1.0){
		vec4 lookup0 = texture(forTex, vec2(i, 0.5));
		vec4 lookup1 = texture(forTex, vec2(i, 1.5));
		if(lookup1.w == 0) continue;
		f.type = int(lookup0.x);
		f.amt = lookup0.y;
		f.rad = lookup0.z;
		f.soft = lookup0.w;
		f.pos = lookup1.xyz;
		f.diff = f.pos - p.pos;
		f.dist = length(f.diff);

		if(f.rad > 0){ // if the radius isn't infinite (-1 is used to set infinite radius);
			if(f.dist > f.rad) return;
			f.amt *= smoothstep(0., f.soft, 1 - f.dist/f.rad);		
		}

		switch (f.type) {
			case 0:	
			    point_attractor_force(p, f);
			    break;
			case 1:
				f.dir = texture(forTex, vec2(i, 2.5)).xyz;
			    directional_force(p, f);
			    break;
			case 2:
				drag_force(p, f);
				break;
			case 3:
				vec4 lookup3 = texture(forTex, vec2(i, 3.5));
				vec4 lookup4 = texture(forTex, vec2(i, 4.5));
				f.field_octaves = texture(forTex, vec2(i, 2.5)).w;
				f.field_type = int(lookup3.w);
				f.noise_func = int(lookup4.w);
				f.field_offset = lookup3.xyz;
				f.field_scale = lookup4.xyz;
				field_force(p, f);
				break;
		} 
	}
}

//______ OBSTACLES __________________________________________________________________________________________

float sphere_intersect(in particle p, in obstacle o, out vec3 hit_normal){

    vec3 oc = p.pos - o.position;
    float b = dot( oc, p.dir );
    float c = dot( oc, oc ) - o.radius*o.radius;
    float h = b*b - c;
    if( h<0.0 ) return -1; // no intersection
	h = sqrt(h);
	float t0 = -b-h;
	if(c <= 0) t0 = -b+h;
	hit_normal = normalize(oc + p.dir*t0); 
	return t0;
	//if(c > 0) return -b-h;
    //return -b-h;
}

float plane_intersect(in particle p, in obstacle o, out vec3 hit_normal){
	
	float denom = dot(p.dir, o.direction);
	if (abs(denom) > 0.0001f) // your favorite epsilon
	{
	    float t = dot(o.position - p.pos, o.direction) / denom;
	    if (t >= 0){
	    	hit_normal = o.direction;
	    	return t; // you might want to allow an epsilon here too
	    } 
	}
	return -1;
}

void apply_obstacles(inout particle p){

	if(p.alive < 1) return;

	float vel_length = length(p.vel);
	p.dir = p.vel / vel_length;

	obstacle o;

	for(float i = 0.5; i < numObstacles; i+=1.0){
		vec4 lookup1 = texture(obsTex, vec2(i, 1.5));
		if(lookup1.w == 0) continue;
		vec4 lookup0 = texture(obsTex, vec2(i, 0.5));
		vec4 lookup2 = texture(obsTex, vec2(i, 2.5));
		vec4 lookup3 = texture(obsTex, vec2(i, 3.5));
		o.shape = int(lookup0.w);
		o.position = lookup0.xyz;
		o.direction = lookup1.xyz;
		o.action = lookup2.w;
		o.scale = lookup2.xyz;
		o.roughness = lookup3.x;
		o.softness = lookup3.y;
		o.radius = lookup3.z;

		float t0;
		vec3 hit_normal;

		switch (o.shape) {
			case 0:	
			    t0 = plane_intersect(p, o, hit_normal);
			    break;
			case 1:
			    t0 = sphere_intersect(p, o, hit_normal);
			    break;
		} 

		if(t0 > vel_length || t0 < 0) continue; //not intersected
		//p.pos += p.dir*t0;
		p.bounced = 1;
		p.bounced_pos = p.pos+p.dir*t0;
		p.alive = o.action;

		if(p.alive < 1) return;

		p.dir = reflect(p.dir, hit_normal);
		p.dir = o.roughness <= 0 ? p.dir : mix(p.dir, normalize(hit_normal + randomUnitVector(p.rng)), o.roughness);
		p.bounced_pos += p.dir*(vel_length - t0);
		p.vel = p.dir*vel_length;
		p.vel /= o.softness + 1;
		return; //*** now it quits after any intersection is found. consider evaluating mutiple obstacles to pick the closest

	}
}

void output_textures(in particle p){

	outPosAge = vec4(p.pos, p.age);
	outVelMass = vec4(p.vel, p.mass);
	outAliveMat = vec4(p.alive, p.mat, p.life_step, p.bounced);
	outBounce = vec4(p.bounced_pos,0);
}

void main(void) {

	particle p;

	get_particle_current_state(p);
	update_age(p);
	update_particle_position(p);
	emit_particles(p);
	apply_forces(p);
	apply_obstacles(p);
	output_textures(p);
}
]]>
</program>
</language>
</jittershader>
